#!/bin/bash

# Error checking
set -euo pipefail

# Set XDG variables
: "${XDG_CONFIG_HOME:=${HOME}/.config}"
: "${XDG_CACHE_HOME:=${HOME}/.cache}"
: "${XDG_DATA_HOME:=${HOME}/.local/share}"
: "${XDG_STATE_HOME:=${HOME}/.local/state}"
: "${XDG_BIN_HOME:=${HOME}/.local/bin}"

# Prompting
function prompt() {
    read -rp "${1:?missing message parameter for prompt} [Y/n] " response
    if [[ ! "${response}" =~ ^([yY][eE][sS]|[yY])$ ]] && [[ ! -z "${response}" ]]; then
        unset response && return 1
    else
        unset response && return 0
    fi
}

CURRENT_DIR="$(dirname "$(readlink -f "${0}")")"

# ~/.config files
if $(prompt 'Would you like to copy over ~/.config files?'); then
    [[ -d "${XDG_CONFIG_HOME}" ]] && echo "${XDG_CONFIG_HOME} exists, please backup before running script. Exiting..." && exit 1
    ln -vfs "${CURRENT_DIR}/.config" "${XDG_CONFIG_HOME}"
fi

# ~/.local/bin files
if $(prompt 'Would you like to copy over ~/.local/bin files?'); then
    [[ -d "${XDG_BIN_HOME}" ]] && echo "${XDG_BIN_HOME} exists, please backup before running script. Exiting..." && exit 1
    ln -vfs "${CURRENT_DIR}/.local/bin" "${XDG_BIN_HOME}"
fi

# Bash files
if $(prompt 'Would you like to link the bash files? (type No if you want to migrate bash to XDG)'); then
    for file in bashrc bash_profile inputrc; do
        [[ -f "${HOME}/.${file}" ]] && echo "${HOME}/.${file} exists, please backup before running script. Exiting..." && exit 1
        ln -vfs "${CURRENT_DIR}/.config/bash/${file}" "${HOME}/.${file}"
    done
    unset file
fi

# Migrating to XDG
if $(prompt 'Would you like to migrate non XDG-compliant applications?'); then
    for file in $(find "${CURRENT_DIR}/xdg" -maxdepth 1 -type f); do
        if $(prompt "Would you like to migrate $(basename ${file})?"); then
            source "${file}"
        fi
    done
fi

unset prompt
unset XDG_CONFIG_HOME XDG_DATA_HOME XDG_CACHE_HOME
unset pipefail

## Additional setup for applications that doesn't follow XDG Base Directory specification
#ln "-fs${q_flag}" "${XDG_CONFIG_HOME}/bash/.inputrc" "${HOME}/.inputrc"
#
#CWD="${BASH_SOURCE[0]}"
#
#if [[ "${s_flag}" = true ]]; then
#    sudo ln "-fs${q_flag}" "${PWD}/.config/bash/profile" '/etc/profile'
#    sudo ln "-fs${q_flag}" "${PWD}/.config/bash/bash.bashrc" '/etc/bash.bashrc'
#    sudo ln "-fs${q_flag}" "${PWD}/.config/bash/inputrc" '/etc/inputrc'
#    sudo ln "-fs${q_flag}" '/usr/bin/python3' '/usr/bin/python'
#fi
#
#unset q_flag
#unset s_flag
